// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(RailDbContext))]
    partial class VouchersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.AppMessages.PageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PageTypes");
                });

            modelBuilder.Entity("Core.Entities.AppMessages.PopUpMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageBodyArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyHebrew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyRussian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationsIds")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int?>("SystemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TitleArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleHebrew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRussian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PageTypeId");

                    b.HasIndex("SystemTypeId");

                    b.ToTable("PopUpMessages", t =>
                        {
                            t.HasTrigger("popupmessages_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.AppMessages.TrainWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndStation")
                        .HasColumnType("int");

                    b.Property<string>("MessageBodyArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyHebrew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageBodyRussian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StartStation")
                        .HasColumnType("int");

                    b.Property<int?>("SystemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TitleArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleHebrew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRussian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.Property<int>("WarningTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SystemTypeId");

                    b.HasIndex("WarningTypeId");

                    b.ToTable("TrainWarnings");
                });

            modelBuilder.Entity("Core.Entities.AppMessages.WarningType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WarningType");
                });

            modelBuilder.Entity("Core.Entities.BackgroundImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsTempExists")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Untill")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BackgroundImage", t =>
                        {
                            t.HasTrigger("backgroundImage_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.Compensation.Compensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CardValidityFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CardValidityToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CardrecievedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("([dbo].[dReturnDate](getdate()))");

                    b.Property<int>("DestinationStationId")
                        .HasColumnType("int");

                    b.Property<int>("OriginStationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartCard")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStationId");

                    b.HasIndex("OriginStationId");

                    b.ToTable("Compensations");
                });

            modelBuilder.Entity("Core.Entities.Configuration.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SystemTypeId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Core.Entities.Configuration.ConfigurationParameter", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ValueMob")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueWeb")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ConfigurationParameter", t =>
                        {
                            t.HasTrigger("configuration_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.Configuration.SystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SystemTypes");
                });

            modelBuilder.Entity("Core.Entities.ContentPages.ContentPages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<string>("Footer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.HasKey("Id");

                    b.ToTable("ContentPages");
                });

            modelBuilder.Entity("Core.Entities.ExemptionNotices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferentMail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ReferentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ExemptionNotices", t =>
                        {
                            t.HasTrigger("ExemptionNotices_insert_trigger");

                            t.HasTrigger("ExemptionNotices_update_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.Fares.EttCodes", b =>
                {
                    b.Property<int>("ETT_Code")
                        .HasColumnType("int");

                    b.Property<string>("ETT_Name_Ar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETT_Name_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETT_Name_He")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETT_Name_Ru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RelevantForMetropoline")
                        .HasColumnType("bit");

                    b.HasKey("ETT_Code");

                    b.ToTable("EttCodes");
                });

            modelBuilder.Entity("Core.Entities.Fares.FaresVersions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FaresVersions");
                });

            modelBuilder.Entity("Core.Entities.Fares.ProfileCodes", b =>
                {
                    b.Property<int>("SmartCard_Profile_Code")
                        .HasColumnType("int");

                    b.Property<int>("Profile_Magnetic")
                        .HasColumnType("int");

                    b.Property<string>("Profile_Name_Ar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Profile_Name_En")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Profile_Name_He")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Profile_Name_Ru")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SmartCard_Profile_Code");

                    b.ToTable("ProfileCodes");
                });

            modelBuilder.Entity("Core.Entities.Forms.FormsIdThrees", b =>
                {
                    b.Property<int>("formId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("formId"));

                    b.Property<string>("firstThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("secondThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thiredThree")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("formId");

                    b.ToTable("FormsIdThrees");
                });

            modelBuilder.Entity("Core.Entities.InquireTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("addonData")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("authNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("authSource")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("baseAmount")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("baseCurrency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("blockedCard")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardAcquirer")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardBin")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardBrand")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardExpiration")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardLength")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardMask")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardNo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cardType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cavv")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cgUid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("clientIp")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("clubId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("creditCompany")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("creditType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("customCardType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cvvFlag")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("cvvStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("eci")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("extendedCardType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("extendedStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("extendedStatusText")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("extendedUserMessage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("fileNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("firstPayment")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("gateway")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("idFlag")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("idStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalCommand")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalDateTime")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalcardId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalcurrency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internallanguage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalmessage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalrequestId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalresult")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalstatusText")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internaltranId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internaluserMessage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internaluseradditionalInfo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("internalversion")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("lifeStyle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("mpiTransactionId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("mti")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("numberOfPayments")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("periodicalPayment")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("railStatus")
                        .HasColumnType("TINYINT");

                    b.Property<string>("serviceCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("sessionCD")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("shiftId1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("shiftId2")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("shiftId3")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("shiftTxnDate")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("slaveTerminalNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("slaveTerminalSequence")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("supplierNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("terminalNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("total")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("transactionCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("transactionType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("user")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData10")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData2")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData3")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData4")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData5")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData6")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData7")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData8")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("userData9")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("validation")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("InquireTransactions");
                });

            modelBuilder.Entity("Core.Entities.MailingList", b =>
                {
                    b.Property<int>("MailingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailingListId"));

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExempId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mails")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlanningAndRatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SingleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.HasKey("MailingListId");

                    b.HasIndex("ExempId")
                        .IsUnique()
                        .HasFilter("[ExempId] IS NOT NULL");

                    b.HasIndex("PlanningAndRatesId")
                        .IsUnique()
                        .HasFilter("[PlanningAndRatesId] IS NOT NULL");

                    b.HasIndex("SingleId")
                        .IsUnique()
                        .HasFilter("[SingleId] IS NOT NULL");

                    b.HasIndex("TenderId")
                        .IsUnique()
                        .HasFilter("[TenderId] IS NOT NULL");

                    b.ToTable("MailingList");
                });

            modelBuilder.Entity("Core.Entities.ManagmentLogger.ManagmentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ManagmentLog");
                });

            modelBuilder.Entity("Core.Entities.ManagmentSystemObjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ManagmentSystemObjects");
                });

            modelBuilder.Entity("Core.Entities.Meetings", b =>
                {
                    b.Property<int>("MeetingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingsId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistretionLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("TendersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingsId");

                    b.HasIndex("TendersId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Core.Entities.Messenger.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Core.Entities.Messenger.SentMessageOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("MessageTypeInfo")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("SentMessagesOld");
                });

            modelBuilder.Entity("Core.Entities.Messenger.SentMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<byte>("MessageType")
                        .HasColumnType("tinyint");

                    b.Property<string>("MessageTypeInfo")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar");

                    b.Property<string>("ResponseStatus")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("SentMessages");
                });

            modelBuilder.Entity("Core.Entities.MotUpdates.MotConvertion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonitoringRef")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MotConvertion");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.EmployeeDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OVOVDNUM")
                        .HasColumnType("int");

                    b.Property<string>("OVMIRS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OVMNEL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("OVMNEL_NAME")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OVOVDMOZ")
                        .HasColumnType("int");

                    b.Property<string>("OVOVDMOZ_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OVOVDYAD")
                        .HasColumnType("int");

                    b.Property<string>("OVOVDYAD_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OVSHEM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OVTZ")
                        .HasColumnType("int");

                    b.Property<string>("TFCODE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TFSUGTE")
                        .HasColumnType("int");

                    b.Property<string>("TFTEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NMBRAK", "DTRKNS", "OVOVDNUM");

                    b.ToTable("EmployeeDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.EngineDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("KTKTRSG")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("KTKTRKB")
                        .HasColumnType("int");

                    b.Property<int>("KTKTRNO")
                        .HasColumnType("int");

                    b.Property<string>("KATAR_DISPLAY")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KATAR_TEUR_DISPLAY")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("KTKTRLEN")
                        .HasColumnType("Real");

                    b.Property<int>("KTKTRMOZ")
                        .HasColumnType("int");

                    b.Property<string>("KTKTRMOZ_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("KTKTRYAD")
                        .HasColumnType("int");

                    b.Property<string>("KTKTRYAD_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KVSGKR")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TFTEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NMBRAK", "DTRKNS", "KTKTRSG", "KTKTRKB", "KTKTRNO");

                    b.ToTable("EngineDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.HandicapDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HCP1STNM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HCPCEL")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HCPLSTNM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HCPRK1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HCPRK2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("HCPSUG")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HCPTHCHG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("HCPTHCHG_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HCPTHMOZ")
                        .HasColumnType("int");

                    b.Property<string>("HCPTHMOZ_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HCPTHYAD")
                        .HasColumnType("int");

                    b.Property<string>("HCPTHYAD_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HCPZMCHG")
                        .HasColumnType("int");

                    b.Property<int>("HCPZMMOZ")
                        .HasColumnType("int");

                    b.HasKey("NMBRAK", "DTRKNS");

                    b.ToTable("HandicapDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.StationDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SHURA2")
                        .HasColumnType("int");

                    b.Property<long>("ARR_DIFF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("COMMERCIAL_STOP")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("DEP_DIFF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("DTHYZA")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DTHYZP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HORHG")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HORHGP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MIKUM")
                        .HasColumnType("int");

                    b.Property<int>("THANA")
                        .HasColumnType("int");

                    b.Property<string>("THTEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZMYZ")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZMYZP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("NMBRAK", "DTRKNS", "SHURA2");

                    b.ToTable("StationDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.TrainDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HUMAS")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float>("KM_NOHEHI")
                        .HasColumnType("Real");

                    b.Property<string>("KVSGKR_LAST")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KVSGKR_MOVIL")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RAK_MIKUM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RAK_STATUS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SEATPLACES")
                        .HasColumnType("int");

                    b.Property<string>("STPPNT")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SUGRAK")
                        .HasColumnType("int");

                    b.Property<string>("SUGRAK_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TEUR_RAKEVET")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("THMOZ")
                        .HasColumnType("int");

                    b.Property<string>("THMOZ_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("THYAD")
                        .HasColumnType("int");

                    b.Property<string>("THYAD_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TOTKR")
                        .HasColumnType("int");

                    b.Property<string>("TRNHANDICAP")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<float>("TRNLENGTH")
                        .HasColumnType("Real");

                    b.Property<float>("TRNWEIGHT")
                        .HasColumnType("Real");

                    b.Property<long>("TUDANO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("UpdateDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UpdateTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("NMBRAK", "DTRKNS");

                    b.ToTable("TrainDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.VisaTimesDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("ARR_DIFF")
                        .HasColumnType("bigint");

                    b.Property<bool>("ArrivalTomorrow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("DEP_DIFF")
                        .HasColumnType("bigint");

                    b.Property<string>("DTHGAA")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DTHGAP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DTRKNP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HORHG")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HORHGP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SUGRAK")
                        .HasColumnType("int");

                    b.Property<string>("ZMYZ")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZMYZP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("NMBRAK", "DTRKNS");

                    b.ToTable("VisaTimesDataFV");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.WagonDataFV", b =>
                {
                    b.Property<int>("NMBRAK")
                        .HasColumnType("int");

                    b.Property<string>("DTRKNS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SGKRON")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("KBKRON")
                        .HasColumnType("int");

                    b.Property<int>("KRSID")
                        .HasColumnType("int");

                    b.Property<string>("KRSG3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KVSGKR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SHURA2")
                        .HasColumnType("int");

                    b.Property<int>("THMOZ")
                        .HasColumnType("int");

                    b.Property<string>("THMOZ_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("THYAD")
                        .HasColumnType("int");

                    b.Property<string>("THYAD_TEUR")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("TTLENG")
                        .HasColumnType("Real");

                    b.Property<long>("TUDANO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("WAGON_DISPLAY")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WAGON_TEUR_DISPLAY")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NMBRAK", "DTRKNS", "SGKRON", "KBKRON", "KRSID");

                    b.ToTable("WagonDataFV");
                });

            modelBuilder.Entity("Core.Entities.Notifications.AutomationNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangedPlatformId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedStationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedTrainTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedStationId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("AutomationNotifications");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutomationNotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PushNotificationId")
                        .HasColumnType("int");

                    b.Property<int>("PushRegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeToSend")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("NotificationEvents");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Core.Entities.Notifications.RailSchedual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StopCode")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RailScheduals");
                });

            modelBuilder.Entity("Core.Entities.Otp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("Core.Entities.PlanningAndRates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<string>("PlanningAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanningAndRates", t =>
                        {
                            t.HasTrigger("Planning_insert_trigger");

                            t.HasTrigger("planning_update_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.PriceEngine.PriceNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DayNote")
                        .HasColumnType("bit");

                    b.Property<bool>("MonthNote")
                        .HasColumnType("bit");

                    b.Property<string>("PriceNoteAr")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PriceNoteEn")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PriceNoteHe")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PriceNoteRu")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Profile_Id")
                        .HasColumnType("int");

                    b.Property<bool>("SingleNote")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Profile_Id");

                    b.ToTable("PriceNotes");
                });

            modelBuilder.Entity("Core.Entities.PriceEngine.Profile_Filtering", b =>
                {
                    b.Property<int>("Request_Id")
                        .HasColumnType("int");

                    b.Property<int>("Profile_Id")
                        .HasColumnType("int");

                    b.Property<string>("Heb_Profile_Desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Request_Id", "Profile_Id");

                    b.ToTable("Profile_Filtering");
                });

            modelBuilder.Entity("Core.Entities.PriceEngine.Profiles", b =>
                {
                    b.Property<int>("Profile_Id")
                        .HasColumnType("int");

                    b.Property<byte?>("Accum_Discount_FL")
                        .HasColumnType("tinyint");

                    b.Property<string>("Arb_Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte?>("Contracts_Discount_FL")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eng_Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("From_Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Heb_Profile_Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rus_Desc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("To_Age")
                        .HasColumnType("smallint");

                    b.HasKey("Profile_Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalPlatform")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartutePlatform")
                        .HasColumnType("int");

                    b.Property<int>("PushRoutingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PushRoutingId");

                    b.ToTable("PushNotifications");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotificationsByDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalPlatform")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartutePlatform")
                        .HasColumnType("int");

                    b.Property<int>("PushRoutingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PushRoutingId");

                    b.ToTable("PushNotificationsByDate");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotificationsByWeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalPlatform")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartutePlatform")
                        .HasColumnType("int");

                    b.Property<int>("PushRoutingId")
                        .HasColumnType("int");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.Property<bool>("day1")
                        .HasColumnType("bit");

                    b.Property<bool>("day2")
                        .HasColumnType("bit");

                    b.Property<bool>("day3")
                        .HasColumnType("bit");

                    b.Property<bool>("day4")
                        .HasColumnType("bit");

                    b.Property<bool>("day5")
                        .HasColumnType("bit");

                    b.Property<bool>("day6")
                        .HasColumnType("bit");

                    b.Property<bool>("day7")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PushRoutingId");

                    b.ToTable("PushNotificationsByWeekDay");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotificationsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalPlatform")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartutePlatform")
                        .HasColumnType("int");

                    b.Property<int>("PushRegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("PushRoutingId")
                        .HasColumnType("int");

                    b.Property<int>("TrainNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PushNotificationsLog");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1000L);

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HWId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RefreshDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PushRegistrations");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRouting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("[dbo].[dReturnDate](getdate())");

                    b.Property<int>("PermanentRegistration")
                        .HasColumnType("int");

                    b.Property<int>("PushRegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("PushRegistrationId");

                    b.ToTable("PushRouting");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRoutingWeekSchedual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PushRoutingId")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PushRoutingId");

                    b.ToTable("PushRoutingWeekScheduals");
                });

            modelBuilder.Entity("Core.Entities.RavKav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("RavKavNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Refundable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RavKav");
                });

            modelBuilder.Entity("Core.Entities.SingleSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferentMail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ReferentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SingleSupplier", t =>
                        {
                            t.HasTrigger("SingleSupplier_insert_trigger");

                            t.HasTrigger("SingleSupplier_update_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TimeUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeUser")
                        .IsUnique();

                    b.ToTable("Discussion");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.TimerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimerRole");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.TimerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("TimerUser");
                });

            modelBuilder.Entity("Core.Entities.Stations.ClosedStationsAndLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FromStation")
                        .HasColumnType("int");

                    b.Property<int>("ToStation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClosedStationsAndLines");
                });

            modelBuilder.Entity("Core.Entities.Stations.StationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BetweenDatesInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ElementCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementCodeAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementCodeEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementCodeHE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementCodeRU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationmInit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StationImage");
                });

            modelBuilder.Entity("Core.Entities.Stations.StationImageComplete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeHe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeRu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StationImageComplete");
                });

            modelBuilder.Entity("Core.Entities.Surveys.SurveysData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SurveysData");
                });

            modelBuilder.Entity("Core.Entities.Surveys.SurveysResults", b =>
                {
                    b.Property<string>("CustID")
                        .HasMaxLength(12)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustID", "TimeStamp");

                    b.HasIndex("SystemTypeId");

                    b.ToTable("SurveysResults");
                });

            modelBuilder.Entity("Core.Entities.TenderDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocDisplay")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DocName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExemptionNoticesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanningAndRatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SingleSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TendersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExemptionNoticesId");

                    b.HasIndex("PlanningAndRatesId");

                    b.HasIndex("SingleSupplierId");

                    b.HasIndex("TendersId");

                    b.ToTable("TenderDocuments");
                });

            modelBuilder.Entity("Core.Entities.TenderTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TenderTypes");
                });

            modelBuilder.Entity("Core.Entities.Tenders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BiddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Biddings")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("ClarifyingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferentMail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ReferentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TenderNumber")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WaitingSupplier")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("WinningAmount")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("WinningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinningSupplier")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Tenders", t =>
                        {
                            t.HasTrigger("tenders_insert_trigger");

                            t.HasTrigger("tenders_update_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.TendersUpdates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfTender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TendersUpdates");
                });

            modelBuilder.Entity("Core.Entities.TrainLocation", b =>
                {
                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<int>("TrainNr")
                        .HasColumnType("int");

                    b.Property<DateTime>("TravelDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar");

                    b.ToTable("TrainLocation");
                });

            modelBuilder.Entity("Core.Entities.Translation.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Arabic")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("English")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Hebrew")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("Russian")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("Id");

                    b.HasIndex("SystemTypeId");

                    b.ToTable("Translations", t =>
                        {
                            t.HasTrigger("translations_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.URLTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Arabic")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Hebrew")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("Russian")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("Id");

                    b.HasIndex("SystemTypeId");

                    b.ToTable("URLTranslations", t =>
                        {
                            t.HasTrigger("url_translations_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.VersionCatalog.VersionCatalog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VersionCatalog");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.DailyTrainStationsTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DailyTrainsTimeTableTrainId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationSequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyTrainsTimeTableTrainId");

                    b.HasIndex("StationId");

                    b.ToTable("DailyTrainStationsTimeTables");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.DailyTrainsTimeTable", b =>
                {
                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TrainId");

                    b.HasIndex("ArrivalStationId");

                    b.HasIndex("DepartureStationId");

                    b.ToTable("DailyTrainsTimeTables");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Metropolin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Metropolins");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.ParkingCosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingCosts");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.RailCalendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("CMO60")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DayInWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameOfHoliday")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfDayInWeek")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("RailCalendar");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Station", b =>
                {
                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Handicap")
                        .HasColumnType("bit");

                    b.Property<string>("HebrewName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<decimal>("Lontitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<int>("MetropolinId")
                        .HasColumnType("int");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<string>("RjpaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RussianName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TicketStationId")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.HasIndex("MetropolinId");

                    b.ToTable("Stations", t =>
                        {
                            t.HasTrigger("station_versioning_trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationActivityHoursTemplates", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"));

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TemplateTypeId")
                        .HasColumnType("int");

                    b.HasKey("TemplateId");

                    b.HasIndex("TemplateName")
                        .IsUnique();

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("StationActivityHoursTemplates");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationActivityHoursTemplatesLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityDaysNumbers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivityHoursReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("EndHour")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<string>("EndHourPostfixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndHourPrefixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndHourReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartHour")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<string>("StartHourPrefixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StartHourReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("StationActivityHoursTemplatesLine");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationActivityTemplatesTypes", b =>
                {
                    b.Property<int>("TemplateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateTypeId"));

                    b.Property<string>("TemplateTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TemplateTypeId");

                    b.ToTable("StationActivityTemplatesTypes");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGate", b =>
                {
                    b.Property<int>("StationGateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationGateId"));

                    b.Property<string>("GateAddressTranslationKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("GateClosed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GateClosedUntill")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GateLatitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<decimal>("GateLontitude")
                        .HasPrecision(18, 11)
                        .HasColumnType("decimal(18,11)");

                    b.Property<string>("GateNameTranslationKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GateOrder")
                        .HasColumnType("int");

                    b.Property<bool>("GateParking")
                        .HasColumnType("bit");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("StationGateId");

                    b.HasIndex("StationId");

                    b.ToTable("StationGate");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateActivityHours", b =>
                {
                    b.Property<int>("StationHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationHoursId"));

                    b.Property<DateTime?>("ClosedUntill")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("StationGateId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateTypeId")
                        .HasColumnType("int");

                    b.HasKey("StationHoursId");

                    b.HasIndex("StationGateId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("StationGateActivityHours");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateActivityHoursLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityDaysNumbers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivityHoursReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("EndHour")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<string>("EndHourPostfixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndHourPrefixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndHourReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartHour")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<string>("StartHourPrefixTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StartHourReplaceTextKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StationHoursId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationHoursId");

                    b.ToTable("StationGateActivityHoursLines");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateServices", b =>
                {
                    b.Property<int>("StationGateId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("isServiceExist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StationGateId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("StationGateServices");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationInfo", b =>
                {
                    b.Property<int>("StationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationInfoId"));

                    b.Property<bool>("AirPolution")
                        .HasColumnType("bit");

                    b.Property<bool>("BikeParking")
                        .HasColumnType("bit");

                    b.Property<int>("BikeParkingCosts")
                        .HasColumnType("int");

                    b.Property<decimal>("LinesMapsX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LinesMapsY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NonActiveElavators")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParkingCosts")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StationInfoFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StationInfoToDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("StationIsClosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StationIsClosedUntill")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationMap")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("StationInfoId");

                    b.HasIndex("StationId")
                        .IsUnique();

                    b.ToTable("StationInfo");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationInfoTranslation", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Arabic")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("English")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hebrew")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Russian")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "StationId");

                    b.HasIndex("StationId");

                    b.ToTable("StationInfoTranslation");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationServices", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Arabic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Hebrew")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconLink")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Russian")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("StationServices");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Synonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("SynonymName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StationId");

                    b.ToTable("Synonyms");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainStationVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("NOV")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationSequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainVoucherTrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainVoucherTrainId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("TrainVoucherTrainId", "TrainVoucherTrainDate");

                    b.ToTable("TrainStationVouchers");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainStationsTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("StationSequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeTableEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTableStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<int>("TrainTimeTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("TrainTimeTableId");

                    b.ToTable("TrainStationsTimeTables");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<bool>("FridayJ")
                        .HasColumnType("bit");

                    b.Property<int>("FridayNOV")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("MondayJ")
                        .HasColumnType("bit");

                    b.Property<int>("MondayNOV")
                        .HasColumnType("int");

                    b.Property<bool>("SaturdayJ")
                        .HasColumnType("bit");

                    b.Property<int>("SaturdayNOV")
                        .HasColumnType("int");

                    b.Property<bool>("SundayJ")
                        .HasColumnType("bit");

                    b.Property<int>("SundayNOV")
                        .HasColumnType("int");

                    b.Property<bool>("ThursdayJ")
                        .HasColumnType("bit");

                    b.Property<int>("ThursdayNOV")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeTableEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTableStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainAlias")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<bool>("TuesdayJ")
                        .HasColumnType("bit");

                    b.Property<int>("TuesdayNOV")
                        .HasColumnType("int");

                    b.Property<bool>("WednesdayJ")
                        .HasColumnType("bit");

                    b.Property<int>("WednesdayNOV")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalStationId");

                    b.HasIndex("DepartureStationId");

                    b.ToTable("TrainTimeTables");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainVoucher", b =>
                {
                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ArrivalStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DepartureStationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("NOV")
                        .HasColumnType("int");

                    b.HasKey("TrainId", "TrainDate");

                    b.HasIndex("ArrivalStationId");

                    b.HasIndex("DepartureStationId");

                    b.ToTable("TrainVouchers");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.VoucherErrorCode", b =>
                {
                    b.Property<string>("LegacyErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("LegacyErrorCode");

                    b.ToTable("VoucherErrorCode");
                });

            modelBuilder.Entity("Core.Entities.AppMessages.PopUpMessages", b =>
                {
                    b.HasOne("Core.Entities.AppMessages.PageType", "PageType")
                        .WithMany()
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId");

                    b.Navigation("PageType");

                    b.Navigation("SystemType");
                });

            modelBuilder.Entity("Core.Entities.AppMessages.TrainWarning", b =>
                {
                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId");

                    b.HasOne("Core.Entities.AppMessages.WarningType", "WarningType")
                        .WithMany()
                        .HasForeignKey("WarningTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemType");

                    b.Navigation("WarningType");
                });

            modelBuilder.Entity("Core.Entities.Compensation.Compensation", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "DestinationStation")
                        .WithMany("CompensationDestinationStation")
                        .HasForeignKey("DestinationStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "OriginStation")
                        .WithMany("CompensationOriginStation")
                        .HasForeignKey("OriginStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationStation");

                    b.Navigation("OriginStation");
                });

            modelBuilder.Entity("Core.Entities.Configuration.Configuration", b =>
                {
                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemType");
                });

            modelBuilder.Entity("Core.Entities.MailingList", b =>
                {
                    b.HasOne("Core.Entities.ExemptionNotices", "ExemptionNotices")
                        .WithOne("MailingList")
                        .HasForeignKey("Core.Entities.MailingList", "ExempId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.PlanningAndRates", "PlanningAndRates")
                        .WithOne("MailingList")
                        .HasForeignKey("Core.Entities.MailingList", "PlanningAndRatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.SingleSupplier", "SingleSupplier")
                        .WithOne("MailingList")
                        .HasForeignKey("Core.Entities.MailingList", "SingleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Tenders", "Tenders")
                        .WithOne("MailingList")
                        .HasForeignKey("Core.Entities.MailingList", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExemptionNotices");

                    b.Navigation("PlanningAndRates");

                    b.Navigation("SingleSupplier");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Core.Entities.Meetings", b =>
                {
                    b.HasOne("Core.Entities.Tenders", "Tenders")
                        .WithMany()
                        .HasForeignKey("TendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Core.Entities.Messenger.SentMessages", b =>
                {
                    b.HasOne("Core.Entities.Messenger.Message", "Message")
                        .WithMany("newSentMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.EmployeeDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.TrainDataFV", "TrainData")
                        .WithMany("Employees")
                        .HasForeignKey("NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TrainData");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.EngineDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.TrainDataFV", "TrainData")
                        .WithMany("Engines")
                        .HasForeignKey("NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TrainData");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.HandicapDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.TrainDataFV", "TrainData")
                        .WithMany("Handicaps")
                        .HasForeignKey("NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TrainData");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.StationDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.VisaTimesDataFV", "VisaTimesData")
                        .WithMany("Stations")
                        .HasForeignKey("NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VisaTimesData");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.VisaTimesDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.TrainDataFV", "TrainData")
                        .WithOne("VISA_TIMES")
                        .HasForeignKey("Core.Entities.MyTravel.VisaTimesDataFV", "NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TrainData");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.WagonDataFV", b =>
                {
                    b.HasOne("Core.Entities.MyTravel.TrainDataFV", "TrainData")
                        .WithMany("Wagons")
                        .HasForeignKey("NMBRAK", "DTRKNS")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TrainData");
                });

            modelBuilder.Entity("Core.Entities.Notifications.AutomationNotification", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "ChangedStation")
                        .WithMany("ChangedStationAutomationNotification")
                        .HasForeignKey("ChangedStationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Core.Entities.Notifications.NotificationType", "NotificationType")
                        .WithMany("AutomationNotifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChangedStation");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationEvent", b =>
                {
                    b.HasOne("Core.Entities.Notifications.NotificationType", "NotificationType")
                        .WithMany("NotificationEvents")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Core.Entities.PriceEngine.PriceNotes", b =>
                {
                    b.HasOne("Core.Entities.PriceEngine.Profiles", "Profiles")
                        .WithMany()
                        .HasForeignKey("Profile_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotification", b =>
                {
                    b.HasOne("Core.Entities.Push.PushRouting", "PushRouting")
                        .WithMany()
                        .HasForeignKey("PushRoutingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PushRouting");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotificationsByDate", b =>
                {
                    b.HasOne("Core.Entities.Push.PushRouting", "PushRouting")
                        .WithMany("PushNotificationsByDate")
                        .HasForeignKey("PushRoutingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PushRouting");
                });

            modelBuilder.Entity("Core.Entities.Push.PushNotificationsByWeekDay", b =>
                {
                    b.HasOne("Core.Entities.Push.PushRouting", "PushRouting")
                        .WithMany("PushNotificationsByWeekDay")
                        .HasForeignKey("PushRoutingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PushRouting");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRouting", b =>
                {
                    b.HasOne("Core.Entities.Push.PushRegistration", "PushRegistration")
                        .WithMany("PushRoutings")
                        .HasForeignKey("PushRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PushRegistration");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRoutingWeekSchedual", b =>
                {
                    b.HasOne("Core.Entities.Push.PushRouting", "PushRouting")
                        .WithMany()
                        .HasForeignKey("PushRoutingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PushRouting");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.Discussion", b =>
                {
                    b.HasOne("Core.Entities.SpeakerTimer.TimerUser", "Owner")
                        .WithOne("Discussion")
                        .HasForeignKey("Core.Entities.SpeakerTimer.Discussion", "TimeUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.Participant", b =>
                {
                    b.HasOne("Core.Entities.SpeakerTimer.Discussion", "Discussion")
                        .WithMany("Participant")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.TimerUser", b =>
                {
                    b.HasOne("Core.Entities.SpeakerTimer.TimerRole", "TimerRole")
                        .WithOne("TimerUsers")
                        .HasForeignKey("Core.Entities.SpeakerTimer.TimerUser", "RoleId");

                    b.Navigation("TimerRole");
                });

            modelBuilder.Entity("Core.Entities.Surveys.SurveysResults", b =>
                {
                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemType");
                });

            modelBuilder.Entity("Core.Entities.TenderDocuments", b =>
                {
                    b.HasOne("Core.Entities.ExemptionNotices", "ExemptionNotices")
                        .WithMany("Documentation")
                        .HasForeignKey("ExemptionNoticesId");

                    b.HasOne("Core.Entities.PlanningAndRates", "PlanningAndRates")
                        .WithMany("Documentation")
                        .HasForeignKey("PlanningAndRatesId");

                    b.HasOne("Core.Entities.SingleSupplier", "SingleSupplier")
                        .WithMany("Documentation")
                        .HasForeignKey("SingleSupplierId");

                    b.HasOne("Core.Entities.Tenders", "Tenders")
                        .WithMany("Documentation")
                        .HasForeignKey("TendersId");

                    b.Navigation("ExemptionNotices");

                    b.Navigation("PlanningAndRates");

                    b.Navigation("SingleSupplier");

                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("Core.Entities.Translation.Translation", b =>
                {
                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemType");
                });

            modelBuilder.Entity("Core.Entities.URLTranslation", b =>
                {
                    b.HasOne("Core.Entities.Configuration.SystemType", "SystemType")
                        .WithMany()
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemType");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.DailyTrainStationsTimeTable", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.DailyTrainsTimeTable", "DailyTrainsTimeTable")
                        .WithMany("Items")
                        .HasForeignKey("DailyTrainsTimeTableTrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "Station")
                        .WithMany("DailyTrainStationsTimeTable")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DailyTrainsTimeTable");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.DailyTrainsTimeTable", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "ArrivalStation")
                        .WithMany("ArrivalDailyTrainTimeTable")
                        .HasForeignKey("ArrivalStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "DepartureStation")
                        .WithMany("DepartureDailyTrainTimeTable")
                        .HasForeignKey("DepartureStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalStation");

                    b.Navigation("DepartureStation");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Station", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Metropolin", "Metropolin")
                        .WithMany("Stations")
                        .HasForeignKey("MetropolinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Metropolin");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationActivityHoursTemplates", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.StationActivityTemplatesTypes", "StationActivityTemplatesTypes")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationActivityTemplatesTypes");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationActivityHoursTemplatesLine", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.StationActivityHoursTemplates", "StationActivityHoursTemplates")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationActivityHoursTemplates");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGate", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", null)
                        .WithMany("StationGate")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateActivityHours", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.StationGate", "StationGate")
                        .WithMany()
                        .HasForeignKey("StationGateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.StationActivityTemplatesTypes", "StationActivityTemplatesTypes")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationActivityTemplatesTypes");

                    b.Navigation("StationGate");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateActivityHoursLines", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.StationGateActivityHours", "StationGateActivityHours")
                        .WithMany()
                        .HasForeignKey("StationHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationGateActivityHours");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGateServices", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.StationServices", "StationServices")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.StationGate", null)
                        .WithMany("StationGateServices")
                        .HasForeignKey("StationGateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationServices");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationInfo", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", null)
                        .WithOne("StationInfo")
                        .HasForeignKey("Core.Entities.Vouchers.StationInfo", "StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationInfoTranslation", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", null)
                        .WithMany("StationInfoTranslation")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Synonym", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Language", "Language")
                        .WithMany("Synonyms")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "Station")
                        .WithMany("Synonym")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainStationVoucher", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "Station")
                        .WithMany("TrainStationVoucher")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.TrainVoucher", "TrainVoucher")
                        .WithMany("Items")
                        .HasForeignKey("TrainVoucherTrainId", "TrainVoucherTrainDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("TrainVoucher");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainStationsTimeTable", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "Station")
                        .WithMany("TrainStationsTimeTable")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.TrainTimeTable", "TrainTimeTable")
                        .WithMany("Items")
                        .HasForeignKey("TrainTimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("TrainTimeTable");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainTimeTable", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "ArrivalStation")
                        .WithMany("ArrivalTrainTimeTable")
                        .HasForeignKey("ArrivalStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "DepartureStation")
                        .WithMany("DepartureTrainTimeTable")
                        .HasForeignKey("DepartureStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalStation");

                    b.Navigation("DepartureStation");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainVoucher", b =>
                {
                    b.HasOne("Core.Entities.Vouchers.Station", "ArrivalStation")
                        .WithMany("ArrivalTrainVoucher")
                        .HasForeignKey("ArrivalStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vouchers.Station", "DepartureStation")
                        .WithMany("DepartureTrainVoucher")
                        .HasForeignKey("DepartureStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalStation");

                    b.Navigation("DepartureStation");
                });

            modelBuilder.Entity("Core.Entities.ExemptionNotices", b =>
                {
                    b.Navigation("Documentation");

                    b.Navigation("MailingList");
                });

            modelBuilder.Entity("Core.Entities.Messenger.Message", b =>
                {
                    b.Navigation("newSentMessages");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.TrainDataFV", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Engines");

                    b.Navigation("Handicaps");

                    b.Navigation("VISA_TIMES")
                        .IsRequired();

                    b.Navigation("Wagons");
                });

            modelBuilder.Entity("Core.Entities.MyTravel.VisaTimesDataFV", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationType", b =>
                {
                    b.Navigation("AutomationNotifications");

                    b.Navigation("NotificationEvents");
                });

            modelBuilder.Entity("Core.Entities.PlanningAndRates", b =>
                {
                    b.Navigation("Documentation");

                    b.Navigation("MailingList");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRegistration", b =>
                {
                    b.Navigation("PushRoutings");
                });

            modelBuilder.Entity("Core.Entities.Push.PushRouting", b =>
                {
                    b.Navigation("PushNotificationsByDate");

                    b.Navigation("PushNotificationsByWeekDay");
                });

            modelBuilder.Entity("Core.Entities.SingleSupplier", b =>
                {
                    b.Navigation("Documentation");

                    b.Navigation("MailingList");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.Discussion", b =>
                {
                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.TimerRole", b =>
                {
                    b.Navigation("TimerUsers");
                });

            modelBuilder.Entity("Core.Entities.SpeakerTimer.TimerUser", b =>
                {
                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("Core.Entities.Tenders", b =>
                {
                    b.Navigation("Documentation");

                    b.Navigation("MailingList");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.DailyTrainsTimeTable", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Language", b =>
                {
                    b.Navigation("Synonyms");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Metropolin", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.Station", b =>
                {
                    b.Navigation("ArrivalDailyTrainTimeTable");

                    b.Navigation("ArrivalTrainTimeTable");

                    b.Navigation("ArrivalTrainVoucher");

                    b.Navigation("ChangedStationAutomationNotification");

                    b.Navigation("CompensationDestinationStation");

                    b.Navigation("CompensationOriginStation");

                    b.Navigation("DailyTrainStationsTimeTable");

                    b.Navigation("DepartureDailyTrainTimeTable");

                    b.Navigation("DepartureTrainTimeTable");

                    b.Navigation("DepartureTrainVoucher");

                    b.Navigation("StationGate");

                    b.Navigation("StationInfo")
                        .IsRequired();

                    b.Navigation("StationInfoTranslation");

                    b.Navigation("Synonym");

                    b.Navigation("TrainStationVoucher");

                    b.Navigation("TrainStationsTimeTable");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.StationGate", b =>
                {
                    b.Navigation("StationGateServices");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainTimeTable", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.Entities.Vouchers.TrainVoucher", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
